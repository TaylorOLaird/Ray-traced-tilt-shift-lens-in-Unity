#pragma kernel CSMain
RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

float4 _RedSphere;
float4 _GreenSphere;
float4 _BlueSphere;

float _DefocusRadius;
float _FocusDistance;

float _XTilt;
float _YTilt;

float _PlaneNormalX;
float _PlaneNormalY;
float _PlaneNormalZ;

float _PlaneOriginX;
float _PlaneOriginY;
float _PlaneOriginZ;

// 0 = pinhole, 1 = pinhole with antialiasing, 2 = thin lens, 3 = tilt shift
int _CameraMode;

static const float PI = 3.14159265f;

struct Ray
{
    float3 origin;
    float3 direction;
};

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
};

Ray NewRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

RayHit NewRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere)
{
    float3 oc = ray.origin - sphere.xyz;
    float a = dot(ray.direction, ray.direction);
    float b = 2.0f * dot(ray.direction, oc);
    float c = dot(oc, oc) - sphere.w * sphere.w;

    float discriminant = b * b - 4.0f * a * c;
    if (discriminant < 0.0f)
        return;

    float t = (-b - sqrt(discriminant)) / (2.0f * a);
    if (t < 0.0f || t > bestHit.distance)
        return;
    
    bestHit.distance = t;
    bestHit.position = ray.origin + t * ray.direction;
    bestHit.normal = normalize(bestHit.position - sphere.xyz);
}

// void intersectPlane(Ray ray, inout RayHit bestHit, float3 p0)
// {
//     float3 n = normalize(float3(_PlaneNormalX, _PlaneNormalY, _PlaneNormalZ));
//     // Assuming vectors are all normalized
//     float denom = dot(n, ray.direction);
//     if (denom > 1e-6) {
//         float t = dot(p0 - ray.origin, n) / denom; 
//         if (t < 0.0f || t > bestHit.distance)
//             return;
        
//         bestHit.distance = t;
//         bestHit.position = ray.origin + t * ray.direction;
//         bestHit.normal = n;
//     }
// }

// bool intersectPlane(const Vec3f &n, const Vec3f &p0, const Vec3f &l0, const Vec3f &l, float &t)
void intersectPlane(Ray ray, inout RayHit bestHit)
{
    float3 n = normalize(float3(_PlaneNormalX, _PlaneNormalY, _PlaneNormalZ));
    float3 p0 = float3(_PlaneOriginX, _PlaneOriginY, _PlaneOriginZ);
    float3 l0 = ray.origin;
    float3 l = ray.direction;
    float t = 0.0f;

    // Assuming vectors are all normalized
    float denom = dot(n, l);
    if (denom > 1e-6) {
        float3 p0l0 = p0 - l0;
        t = dot(p0l0, n) / denom;

        if (t < 0.0f || t > bestHit.distance)
            return;

        bestHit.distance = t;
        bestHit.position = l0 + t * l;
        bestHit.normal = n;
    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = NewRayHit();
    // IntersectSphere(ray, bestHit, float4(0, 0.0f, 0, 1.0f));
    IntersectSphere(ray, bestHit, _RedSphere);
    IntersectSphere(ray, bestHit, _GreenSphere);
    IntersectSphere(ray, bestHit, _BlueSphere);
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        // Return the normal
        return hit.normal * 0.5f + 0.5f;
    }
    else
    {
        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

float2 grid_to_disc(float x, float y)
{
    float r, phi;
    float2 translated_coords = float2(0.0f, 0.0f);
    if (x * x > y * y) {
        r = x;
        phi = (PI * y) / (4.0f * x);
    } else {
        r = y;
        phi = (PI / 2.0f) - (PI / 4.0f) * (x / y);
    }

    return float2(r * cos(phi), r * sin(phi));
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return NewRay(origin, direction);
}

float4 CalculateAntialiasingRayResult(float2 uv)
{
    float range = 0.002f;
    float step = range / 3.5f;
    float samples = 0.0f;
    float3 result = float3(0.0f, 0.0f, 0.0f);

    Ray camera_ray = CreateCameraRay(uv);

    for (float i = -range; i <= range; i += step)
    {
        for (float j = -range; j <= range; j += step)
        {
            float3 jitered_ray_origin = camera_ray.origin;
            float3 jitered_ray_direction = camera_ray.direction + float3(i, j, 0.0f);
            jitered_ray_direction = normalize(jitered_ray_direction);

            Ray jitered_ray = NewRay(jitered_ray_origin, jitered_ray_direction);
            RayHit hit = Trace(jitered_ray);
            float3 color = Shade(jitered_ray, hit);
            
            result += color;
            samples += 1.0f;
        }
    }

    result /= samples;\
    return float4(result, 1);
}

float4 CalculateThinLensRayResult(float2 uv)
{
    float3 result = float3(0.0f, 0.0f, 0.0f);
    Ray camera_ray = CreateCameraRay(uv);
    float3 focal_point = camera_ray.origin + camera_ray.direction * _FocusDistance;
    float samples = 0.0f;

    // Sample the lens disc
    for (float i = -0.5f * _DefocusRadius; i <= 0.5f * _DefocusRadius; i += 0.1f)
    {
        for (float j = -0.5f * _DefocusRadius; j <= 0.5f * _DefocusRadius; j += 0.1f)
        {
            float3 lens_ray_origin = float3(grid_to_disc(i, j), 0.0f);
            lens_ray_origin += camera_ray.origin;
            float3 lens_ray_direction = normalize(focal_point - lens_ray_origin);

            Ray lens_ray = NewRay(lens_ray_origin, lens_ray_direction);
            RayHit hit = Trace(lens_ray);
            float3 color = Shade(lens_ray, hit);

            result += color;
            samples += 1.0f;
        }
    }
    result /= samples;
    return float4(result, 1);
}

// float intersectPlane(float3 n, float3 p0, float3 l0, float3 l)
// {
//     // Assuming vectors are all normalized
//     float denom = dotProduct(n, l);
//     float t = 0.0f;
//     if (denom > 1e-6) {
//         float3 p0l0 = p0 - l0;
//         t = dotProduct(p0 - l0, n) / dotProduct(n, l); 
//         return t;
//     }

//     return 0.0f;
// }

float4 CalculateTiltShiftRayResult(float2 uv)
{
    float _XTiltNormalized = _XTilt / 45.0f;
    float _YTiltNormalized = _YTilt / 45.0f;

    // float tilt_x = _XTiltNormalized * 0.5f + 1.0f;
    // float tilt_y = _YTiltNormalized * 0.5f + 1.0f;

    // float3 focal_point = camera_ray.origin + camera_ray.direction * _FocusDistance;
    float3 focal_point;
    
    Ray camera_ray = CreateCameraRay(uv);

    // float top_left    = ((1.0f * _XTiltNormalized * -1.0f) + (1.0f * _YTiltNormalized * -1.0f))/2.0f;
    // float top_right   = ((1.0f * _XTiltNormalized * -1.0f) + (1.0f * _YTiltNormalized))/2.0f;
    // float botom_left  = ((1.0f * _XTiltNormalized) + (1.0f * _YTiltNormalized * -1.0f))/2.0f;
    // float botom_right = ((1.0f * _XTiltNormalized) + (1.0f * _YTiltNormalized))/2.0f;

    // top_left    = max(top_left, 0.0f);
    // top_right   = max(top_right, 0.0f);
    // botom_left  = max(botom_left, 0.0f);
    // botom_right = max(botom_right, 0.0f);

    // left
    // if (uv.x <0.0f)
    // {
    //     // top left
    //     if (uv.y > 0.0f)
    //     {
    //         focal_point = camera_ray.origin + camera_ray.direction * (_FocusDistance * (1 + top_left));
    //     }
    //     // botom left
    //     else
    //     {
    //         focal_point = camera_ray.origin + camera_ray.direction * (_FocusDistance * (1 + botom_left));
    //     }
    // }
    // // right
    // else
    // {
    //     // top right
    //     if (uv.y > 0.0f)
    //     {
    //         focal_point = camera_ray.origin + camera_ray.direction * (_FocusDistance * (1 + top_right));
    //     }
    //     // bottom right
    //     else
    //     {
    //         focal_point = camera_ray.origin + camera_ray.direction * (_FocusDistance * (1 + botom_right));
    //     }
    // }

    // focal_point = camera_ray.origin + camera_ray.direction * (_FocusDistance * (1 - ((top_left + top_right + botom_left + botom_right))));

    // float focal_length = _FocusDistance;

    // float3 focus_a = _RedSphere.xyz;
    // float3 focus_b = _GreenSphere.xyz;
    // float3 focus_c = _BlueSphere.xyz;

    // float3 normal = normalize(cross(focus_b - focus_a , focus_c - focus_a));

    // float3 tilt = float3(0.0f, 0.0f, 0.0f);
    // if (abs(normal.x) > abs(normal.y))
    // {
    //     tilt.x = (focus_a.z - focus_b.z) * focal_length /
    //         (focus_a.z * focus_b.x - focus_b.z * focus_a.x +
    //         (focus_a.z * focus_b.y - focus_b.z * focus_a.y) *
    //         normal.y / normal.x);

    //     tilt.y = tilt.x * normal.y / normal.x;
    // }
    // else if (abs(normal.y) > 0.0)
    // {
    //     tilt.y = (focus_a.z - focus_b.z) * focal_length /
    //         (focus_a.z * focus_b.y - focus_b.z * focus_a.y +
    //         (focus_a.z * focus_b.x - focus_b.z * focus_a.x) *
    //         normal.x / normal.y);

    //     tilt.x = tilt.y * normal.x / normal.y;
    // }
    // tilt.z = sqrt(1.0 - tilt.x * tilt.x - tilt.y * tilt.y);

    // // return float4(tilt.x, tilt.y, tilt.z, 1.0f);
    // float aperture = _DefocusRadius;

    // t = dotProduct(p0 - l0, n) / dotProduct(n, l); 
    
    float3 result = float3(0.0f, 0.0f, 0.0f);
    float samples = 0.0f;
    // Sample the lens disc
    for (float i = -0.5f * _DefocusRadius; i <= 0.5f * _DefocusRadius; i += 0.1f)
    {
        for (float j = -0.5f * _DefocusRadius; j <= 0.5f * _DefocusRadius; j += 0.1f)
        {
            float3 lens_ray_origin = float3(grid_to_disc(i, j), 0.0f);
            lens_ray_origin += camera_ray.origin;
            float3 lens_ray_direction = normalize(focal_point - lens_ray_origin);

            Ray lens_ray = NewRay(lens_ray_origin, lens_ray_direction);
            RayHit hit = Trace(lens_ray);
            float3 color = Shade(lens_ray, hit);

            result += color;
            samples += 1.0f;
        }
    }
    result /= samples;
    return float4(result, 1);
}

// float4 CalculateTiltShiftRayResult(float2 uv)
// {
//     // return float4(0.0f, 0.0f, 0.0f, 1.0f);

//     Ray camera_ray = CreateCameraRay(uv);
//     float3 focal_point = camera_ray.origin + camera_ray.direction * _FocusDistance;

//     // this might instead need to be like the magnitude of the a vectror between
//     // the camera and the focal point
//     float focal_length = _FocusDistance;

//     float3 focus_a = _RedSphere.xyz;
//     float3 focus_b = _GreenSphere.xyz;
//     float3 focus_c = _BlueSphere.xyz;

//     // Focal plane values (precomputable)
//     float3 normal = normalize(cross(focus_b - focus_a, focus_c - focus_a));
    
//     // Lens values (precomputable)
//     float3 tilt = float3(0.0f, 0.0f, 0.0f);
//     if (abs(normal.x) > abs(normal.y))
//     {
//         tilt.x = (focus_a.z - focus_b.z) * focal_length /
//             (focus_a.z * focus_b.x - focus_b.z * focus_a.x +
//             (focus_a.z * focus_b.y - focus_b.z * focus_a.y) *
//             normal.y / normal.x);

//         tilt.y = tilt.x * normal.y / normal.x;
//     }
//     else if (abs(normal.y) > 0.0)
//     {
//         tilt.y = (focus_a.z - focus_b.z) * focal_length /
//             (focus_a.z * focus_b.y - focus_b.z * focus_a.y +
//             (focus_a.z * focus_b.x - focus_b.z * focus_a.x) *
//             normal.x / normal.y);

//         tilt.x = tilt.y * normal.x / normal.y;
//     }
//     tilt.z = sqrt(1.0 - tilt.x * tilt.x - tilt.y * tilt.y);

//     float3 basis_u = normalize(cross(tilt, abs(tilt.x) > abs(tilt.y) ? 
//         float3(0.0, 1.0, 0.0) : 
//         float3(1.0, 0.0, 0.0)));

//     float3 basis_v = cross(tilt, basis_u);
//     float aperture = _DefocusRadius;

//     float image_plane = focus_a.z * focal_length /
//         (dot(focus_a , tilt) - focal_length);

//     return float4(0.0f, 0.0f, 0.0f, 1.0f);
// }

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    
    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);

    if (_CameraMode == 0)
    {
        Ray ray = CreateCameraRay(uv);
        RayHit hit = Trace(ray);
        Result[id.xy] = float4(Shade(ray, hit).xyz, 1.0f);
    }
    else if (_CameraMode == 1)
    {
        Result[id.xy] = CalculateAntialiasingRayResult(uv);
    }
    else if (_CameraMode == 2)
    {
        Result[id.xy] = CalculateThinLensRayResult(uv);
    }
    else if (_CameraMode == 3)
    {
        Result[id.xy] = CalculateTiltShiftRayResult(uv);
    }
}